exports.init = function(grunt, options) {
    'use strict';

    //import libs
    var _ = require('lodash');
    var path = require('path');

    var defaultOptions = {
        settingsFileName: 'settings.json',
        projectPath: 'project/',
        requireConfig: 'jam/require.config.js',
        fileTypes: [
            'json',
            'yaml',
            'html'
        ]
    };
    var options = _.extend({}, defaultOptions, options);

    //path to config file relative to repo root
    var requireConfigPath = options.projectPath + options.requireConfig;

    //variable to store 
    var settings = getSettingsModule();
    //add extra properties to settings for use by Gruntfile
    settings.fileTypes = options.fileTypes;
    settings.projectPath = options.projectPath;
    settings.filePatterns = getTextFilePatterns(settings.DATA_DIRS, settings.fileTypes);

    return settings;

    //converts path relative to project root to absolute file system path 
    function projectToAbsPath(relPath) {
        return path.resolve(relPath);
    }

    function getSettingsModule() {
        //get settings Path and check valid
        var settingsPath = options.projectPath + options.settingsFileName;
        if (grunt.file.exists(settingsPath)) {
            grunt.log.writeln('Using ' + settingsPath);
        } else {
            //exit with task error
            grunt.warn('Cant find ' + options.settingsFileName, 3);
        }
        var settings = require(projectToAbsPath(settingsPath));
        return settings;
    };

    function getTextFilePatterns(modulePaths, fileTypes) {
        // Get requireJS config to be able to resolve module paths.
        var config;
        if (grunt.file.exists(requireConfigPath)) {
            //use the require config generated by jam
            config = require(projectToAbsPath(requireConfigPath));
        } else {
            //exit with task error
            grunt.warn('Cant find ' + requireConfigPath, 3);
        }

        //Find the text files in all requireJS modules
        //Replaces a requireJS URL path with the real file system path to that module
        function getRealModulePath(modulePath) {
            var realModulePath = modulePath;
            var packageItem;
            if (config && config.packages) {
                //iterate through packages and if the modulepath starts with a package name, replace it with the real path
                _.each(config.packages, function(packageItem) {
                    if (modulePath.indexOf(packageItem.name + '/') === 0) {
                        //modulePath starts with this package name, so we need to replace it with real path
                        realModulePath = modulePath.replace(packageItem.name, packageItem.location);
                    }
                });
            }
            return options.projectPath + realModulePath;
        };

        //turn dataDirs into array of modules with paths
        var realModulePaths = _.map(modulePaths, function (modulePath) {
            var realPath = getRealModulePath(modulePath);
            return {
                requireJSPath: modulePath,
                realPath: realPath,
                filePattern: realPath + '/**/*.{' + fileTypes.join(',') + '}'
            }
        });

        return realModulePaths;
    }
};
