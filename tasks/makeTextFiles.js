/*
 * grunt-makeTextFiles
 * 
 *
 * Copyright (c) 2014 Incuna Ltd.
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

    // Please see the Grunt documentation for more information regarding task
    // creation: http://gruntjs.com/creating-tasks

    grunt.registerMultiTask('makeTextFiles', 'Builds textfiles.js needed by eDetails', function() {
        // Merge task-specific and/or target-specific options with these defaults.
        var options = this.options({
            settingsPath: ''
        });


        // Nodejs libs.
        var fs = require('fs');
        var path = require('path');
        var requirejs = require('requirejs');
        var glob = require("glob");
        var _ = require('lodash');

        var requireConfigPath = 'jam/require.config.js';
        var settingsFileName = 'settings.js';
        //template file relative to this file
        var templateFileName = '../templates/textFiles.template.js';
        var destinationFileName = 'textFiles.js';

        function getSettingsFilePath() {
            var settingsPath;
            if (options.settingsPath) {
                // settingsPath specified
                settingsPath = options.settingsPath;
            } else {
                // Guess settingsPath
                if (grunt.file.exists(settingsFileName)) {
                    settingsPath = settingsFileName;
                } else {
                    var found = grunt.file.expand('*/' + settingsFileName)
                    if (found.length) {
                        settingsPath = found[0];
                    }
                }
            }
            return settingsPath;
        }

        //converts path relative to project root to absolute file system path 
        function projectToAbsPath(relPath) {
            return path.resolve(relPath);
        }
        //converts path relative to plugin root to absolute file system path 
        function pluginToAbsPath(relPath) {
            return path.join(__dirname, relPath);
        }

        //get settings Path and check valid
        var settingsPath = getSettingsFilePath();
        if (grunt.file.exists(settingsPath)) {
            grunt.log.writeln('Using ' + settingsPath);
        } else {
            //exit with task error
            grunt.warn('Cant find ' + settingsFileName, 3);
        }

        // Get requireJS config to be able to resolve module paths.
        if (grunt.file.exists(requireConfigPath)) {
            //use the require config generated by jam
            requirejs(projectToAbsPath(requireConfigPath));
        } else {
            //this is an old non-jam project?
            requirejs.config({
                'paths': {
                'lib': '../lib',
                'lodash': '../lib/require-underscore/underscore'
                }
            });
        }

        //Find the text files in all requireJS modules
        var root_len = requirejs.toUrl('').replace(/.js$/, '').length;
        //returns the relative module path to the requireJS root path
        function modulePath(module) {
          return requirejs.toUrl(module).replace(/.js$/, '').substr(root_len);
        };

        var settings = requirejs(projectToAbsPath(settingsPath));
        var filePaths = _.chain(settings.DATA_DIRS).map(function (module) {
            // Use require to determine the module path.
            var processedDir = modulePath(module);
            var options = {
                cwd: processedDir
            }

            var files = grunt.file.expand(options, '**/*.{json,yaml,html}')

            // Append the file paths to the module path.
            return _(files).map(function (file) {return path.join(module, file);});
        }).flatten().value();

        if (!filePaths) {
            //warn and exit grunt with a task
            grunt.warn('No files found', 0);
        }

        var sortedPaths = filePaths.sort();
        var textPaths = _(sortedPaths).map(function (filePath) {
            return 'text!' + filePath
        });

        // Write out the textFiles manifest using the template and the built files array
        //get absolute template path in filesystem
        var templatePath = pluginToAbsPath(templateFileName);
        //get template file contents
        var templateString = fs.readFileSync(absTemplatePath, 'utf8');

        grunt.log.writeln('Writing ' + destinationFileName);
        var fileTemplate = _.template(templateString);
        var destinationFileContents = fileTemplate({
            textFiles: sortedPaths.join("',\n        '"),
            paths: textPaths.join("',\n    '")
        });
        var destinationPath = projectToAbsPath(destinationFileName);
        fs.writeFile(destinationPath, destinationFileContents);
    });
};
